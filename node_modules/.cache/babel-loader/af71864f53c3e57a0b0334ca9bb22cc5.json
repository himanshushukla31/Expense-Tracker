{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Himanshu Shukla\\\\Desktop\\\\React-App-Expenses\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpenseForm = props => {\n  _s();\n\n  const [EnteredTitle, setEnteredTitle] = useState(' ');\n  const [EnteredAmount, setEnteredAmount] = useState(' ');\n  const [EnteredDate, setEnteredDate] = useState(' ');\n  const [addExpenseButton, setAddExpenseButton] = useState(true);\n\n  const titleChangeHandler = event => {\n    setEnteredTitle(event.target.value);\n  };\n\n  const amountChangeHandler = event => {\n    setEnteredAmount(event.target.value);\n  };\n\n  const dateChangeHandler = event => {\n    setEnteredDate(event.target.value);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault(); //This functions helps us to prevent the reloading of the form when it is submitted.\n    //This is pure javascript function nothing react specific.\n\n    const enteredExpenseData = {\n      title: EnteredTitle,\n      amount: +EnteredAmount,\n      date: new Date(EnteredDate)\n    };\n    props.onSaveExpenseData(enteredExpenseData);\n    setEnteredAmount(' '); //To clear up the value in the input once the form is submitted.\n\n    setEnteredTitle(' ');\n    setEnteredDate(' ');\n  };\n\n  const clickHandler = () => {\n    setAddExpenseButton(preVale => {\n      return !preVale;\n    });\n  };\n\n  if (addExpenseButton) {\n    //To manage the component rendering by conditionals\n    return (\n      /*#__PURE__*/\n      // We can use return statement in an if condition if we want to render a complete different jsx code when a particular condition is satisfied.\n      _jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clickHandler,\n          children: \"Add New Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-expense__controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: EnteredTitle,\n          onChange: titleChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: EnteredAmount,\n          min: \"0.01\",\n          step: \"0.01\",\n          onChange: amountChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__control\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"date\",\n          value: EnteredDate,\n          min: \"2019-01-01\",\n          max: \"2022-12-31\",\n          onChange: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clickHandler,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"new-expense__actions\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Expense\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpenseForm, \"nIgWUjrznNnVsgBS5smeMzSOUMQ=\");\n\n_c = ExpenseForm;\nexport default ExpenseForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"sources":["C:/Users/Himanshu Shukla/Desktop/React-App-Expenses/src/components/NewExpense/ExpenseForm.js"],"names":["React","useState","ExpenseForm","props","EnteredTitle","setEnteredTitle","EnteredAmount","setEnteredAmount","EnteredDate","setEnteredDate","addExpenseButton","setAddExpenseButton","titleChangeHandler","event","target","value","amountChangeHandler","dateChangeHandler","submitHandler","preventDefault","enteredExpenseData","title","amount","date","Date","onSaveExpenseData","clickHandler","preVale"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,GAAD,CAAhD;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCN,QAAQ,CAAC,GAAD,CAAlD;AACA,QAAM,CAACO,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,GAAD,CAA9C;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,IAAD,CAAxD;;AAEA,QAAMW,kBAAkB,GAAIC,KAAD,IAAW;AACpCR,IAAAA,eAAe,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACD,GAFD;;AAGA,QAAMC,mBAAmB,GAAIH,KAAD,IAAW;AACrCN,IAAAA,gBAAgB,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAhB;AACD,GAFD;;AAGA,QAAME,iBAAiB,GAAIJ,KAAD,IAAW;AACnCJ,IAAAA,cAAc,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAGA,QAAMG,aAAa,GAAIL,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACM,cAAN,GAD+B,CACR;AACvB;;AAEA,UAAMC,kBAAkB,GAAG;AACzBC,MAAAA,KAAK,EAAEjB,YADkB;AAEzBkB,MAAAA,MAAM,EAAE,CAAChB,aAFgB;AAGzBiB,MAAAA,IAAI,EAAE,IAAIC,IAAJ,CAAShB,WAAT;AAHmB,KAA3B;AAKAL,IAAAA,KAAK,CAACsB,iBAAN,CAAwBL,kBAAxB;AAEAb,IAAAA,gBAAgB,CAAC,GAAD,CAAhB,CAX+B,CAWT;;AACtBF,IAAAA,eAAe,CAAC,GAAD,CAAf;AACAI,IAAAA,cAAc,CAAC,GAAD,CAAd;AACD,GAdD;;AAgBA,QAAMiB,YAAY,GAAG,MAAM;AACzBf,IAAAA,mBAAmB,CAAEgB,OAAD,IAAa;AAC/B,aAAO,CAACA,OAAR;AACD,KAFkB,CAAnB;AAGD,GAJD;;AAMA,MAAIjB,gBAAJ,EAAsB;AACpB;AACA;AAAA;AACE;AACA;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAEgB,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFF;AAMD;;AAED,sBACE;AAAM,IAAA,QAAQ,EAAER,aAAhB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,KAAK,EAAEd,YAFT;AAGE,UAAA,QAAQ,EAAEQ;AAHZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,KAAK,EAAEN,aAFT;AAGE,UAAA,GAAG,EAAC,MAHN;AAIE,UAAA,IAAI,EAAC,MAJP;AAKE,UAAA,QAAQ,EAAEU;AALZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,eAmBE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,gCACE;AACE,UAAA,IAAI,EAAC,MADP;AAEE,UAAA,KAAK,EAAER,WAFT;AAGE,UAAA,GAAG,EAAC,YAHN;AAIE,UAAA,GAAG,EAAC,YAJN;AAKE,UAAA,QAAQ,EAAES;AALZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnBF,eA6BE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACE;AAAQ,UAAA,OAAO,EAAES,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7BF,eAgCE;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA,+BACE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAhCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD,CAvFD;;GAAMxB,W;;KAAAA,W;AAyFN,eAAeA,WAAf","sourcesContent":["import React, { useState } from 'react'\r\nimport './ExpenseForm.css'\r\n\r\nconst ExpenseForm = (props) => {\r\n  const [EnteredTitle, setEnteredTitle] = useState(' ')\r\n  const [EnteredAmount, setEnteredAmount] = useState(' ')\r\n  const [EnteredDate, setEnteredDate] = useState(' ')\r\n  const [addExpenseButton, setAddExpenseButton] = useState(true)\r\n\r\n  const titleChangeHandler = (event) => {\r\n    setEnteredTitle(event.target.value)\r\n  }\r\n  const amountChangeHandler = (event) => {\r\n    setEnteredAmount(event.target.value)\r\n  }\r\n  const dateChangeHandler = (event) => {\r\n    setEnteredDate(event.target.value)\r\n  }\r\n  const submitHandler = (event) => {\r\n    event.preventDefault() //This functions helps us to prevent the reloading of the form when it is submitted.\r\n    //This is pure javascript function nothing react specific.\r\n\r\n    const enteredExpenseData = {\r\n      title: EnteredTitle,\r\n      amount: +EnteredAmount,\r\n      date: new Date(EnteredDate),\r\n    }\r\n    props.onSaveExpenseData(enteredExpenseData)\r\n\r\n    setEnteredAmount(' ') //To clear up the value in the input once the form is submitted.\r\n    setEnteredTitle(' ')\r\n    setEnteredDate(' ')\r\n  }\r\n\r\n  const clickHandler = () => {\r\n    setAddExpenseButton((preVale) => {\r\n      return !preVale\r\n    })\r\n  }\r\n\r\n  if (addExpenseButton) {\r\n    //To manage the component rendering by conditionals\r\n    return (\r\n      // We can use return statement in an if condition if we want to render a complete different jsx code when a particular condition is satisfied.\r\n      <div className=\"new-expense__actions\">\r\n        <button onClick={clickHandler}>Add New Expense</button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-expense__controls\">\r\n        <div className=\"new-expense__control\">\r\n          <input\r\n            type=\"text\"\r\n            value={EnteredTitle}\r\n            onChange={titleChangeHandler}\r\n          />\r\n          <label>Title</label>\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <input\r\n            type=\"number\"\r\n            value={EnteredAmount}\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            onChange={amountChangeHandler}\r\n          />\r\n          <label>Amount</label>\r\n        </div>\r\n        <div className=\"new-expense__control\">\r\n          <input\r\n            type=\"date\"\r\n            value={EnteredDate}\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            onChange={dateChangeHandler}\r\n          />\r\n          <label>Date</label>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button onClick={clickHandler}>Cancel</button>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n          <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ExpenseForm\r\n"]},"metadata":{},"sourceType":"module"}